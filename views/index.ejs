<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/css/imagestyles.css">
    <title>Document</title>
</head>
<body>
    
    <main class="app">

        <div class="header">
            <h2>Upload Images</h2>
            <div class="server-message"></div>
        </div>

        <div class="input-div">
            <p>Drag & Drop Images Here or <span class="browse">Browse</span></p>
            <input type="file" class="file" multiple="multiple" accept="image/png, image/jpeg, image/jpg">
        </div>

        <!-- Contains our Saved Images from the Server -->
        <form id="saved-form">

            <div class="header">
                <h3>Saved In Server</h3>
                <button type="submit">Delete</button>
            </div>

            <!-- This is where the saved images are going to display -->
            <div class="saved-div"></div>

        </form>

        <form id="queued-form">

            <div class="header">
                <h3>Queued In Frontend</h3>
                <button type="submit">Upload</button>
            </div>

            <!-- This is where the images that the user is going to upload are displayed -->
            <div class="queued-div"></div>
        </form>

    </main>

    <!-- Dynamic HTML for Images -->
    <!-- <div class="image">

        <img src="" alt="image">

        Adding a little 'x' so the user can delete the image
        <span onclick="deleteQueuedImage()">&times;</span>

    </div> -->

    <script>

        // Get Access to all the Elements
        let queuedImagesArray = [],
        savedForm = document.querySelector("#saved-form"),
        queuedForm = document.querySelector("#queued-form"),
        savedDiv = document.querySelector(".saved-div"),
        queuedDiv = document.querySelector(".queued-div"),
        inputDiv = document.querySelector(".input-div"),
        input = document.querySelector(".input-div input"),
        serverMessage = document.querySelector(".server-message"),
        deleteImages = [];

        // Saved Server Images

        // Queued in Frontend Images
        // Event listener for an input
        input.addEventListener("change", () => {

            const files = input.files
            
            // Need a for loop in-case user uploads more than one image
            for(let i = 0; i < files.length; i++){
                queuedImagesArray.push(files[i])
            }

            queuedForm.reset()
            displayQueuedImages()

        })

        // Drag and Drop Functionality
        inputDiv.addEventListener("drop", (e) => {

            e.preventDefault()

            // Store the images the user uploaded inside of these variable files
            const files = e.dataTransfer.files
            // console.log(files)

            for(let i = 0; i < files.length; i++){

                // Have to check if user actually uploaded image
                // So this if statement checks if the file type matches "image" file type specifications
                if(!files[i].type.match("image")) continue

                // Checking to make sure there are no duplicate image name uploads
                if(queuedImagesArray.every(image => image.name !== files[i].name))
                    queuedImagesArray.push(files[i])

            }

            displayQueuedImages()

        })

        function displayQueuedImages(){
            let images = ""

            // Access each image and it's index
            queuedImagesArray.forEach((image, index) => {

                // For each image we get a dynamic HTML
                images += `<div class="image">

                                <img src="${URL.createObjectURL(image)}" alt="image">

                                <!-- Adding a little 'x' so the user can delete the image -->
                                <span onclick="deleteQueuedImage(${index})">&times;</span>

                           </div>`

            })

            // Display these on screen
            queuedDiv.innerHTML = images

        }

        function deleteQueuedImage(index){

            // Remove the image from the array using 'splice'
            queuedImagesArray.splice(index, 1)

            //Update the display for the queuedImagesArray
            displayQueuedImages()
        }

        // Input Button Event Listener
        queuedForm.addEventListener("submit", (e) => {

            // Reason we need this because if we don't add it, it will submit form without
            // checking for anything else, and we want it to call a function before it
            // submits the form
            e.preventDefault()

            sendQueuedImagesToServer()


        })

        function sendQueuedImagesToServer(){

            // Needed to send multi-media onto the server
            const formData = new FormData(queuedForm)

            // Append each of the images we want to send to the server
            queuedImagesArray.forEach((image, index) => {

                formData.append(`file[${index}]`, image)

            })

            // Create a fetch request to send the data to the server

            // Create route called "upload" in our server
            // This is going to be a POST method where we send the formData to our body
            fetch("upload", {
                
                method:"POST",
                body : formData

            })

            //Catch the response using Promises
            .then(response => {

                // Catch the error
                if(response.status != 200) throw Error(response.statusText)

                // If it is successful
                location.reload()


            })

            .catch(error => {

                serverMessage.innerHTML = error
                serverMessage.style.cssText = "background-color: #f8d7da; color: #b71c1c"

            })

        }


    </script>

</body>
</html>